
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local VirtualUser = game:GetService("VirtualUser")

local Player = Players.LocalPlayer


local Leaderstats = Player:WaitForChild("Leaderstats")
local Vars = Player:WaitForChild("Vars")
local AllStats = Player:WaitForChild("All_Stats")
local Inventory = Player:WaitForChild("Inventory")


local Map = workspace.Map
local Mobs = workspace.Mobs

local InfoTables = require(ReplicatedStorage.Modules.InformationTables).Tools :: {[string] : {["Time"] : number}}

local Shops = Map.Shops
local FleaMarket = Shops.FleaMarket
local Items = FleaMarket.Items
local Item1 = Items["1"]

local Tween : Tween -- может пригодиться позже

local AllConverters = {
	"Conv1_2",
	"Conv2_2",
	"Conv3_2",
	"Conv4_2",
}
local UsedConverters = {}


local ohString1 = "ActionCall"
local ohString2 = "Anthill"

local IsConverting = true


local function TweenTo(CF : CFrame)
	if typeof(CF) ~= "CFrame" then return end
	--if typeof(Tween) == "Tween" and Tween.PlaybackState ~= Enum.PlaybackState.Completed then return end
	local Character = Player.Character
	if not Character then
		Character = Player.CharacterAdded:Wait()
	end
	--print("1")

	--print("2")
	local CFrameValue = Instance.new("CFrameValue")
	CFrameValue.Value = Character:GetPivot()
	CFrameValue:GetPropertyChangedSignal("Value"):Connect(function()
		Character:PivotTo(CFrameValue.Value)

	end)

	--CFrameValue:GetPropertyChangedSignal("Value"):Connect(function()
	--	model:PivotTo(CFrameValue.Value)
	--end)
	--print("3")
	Tween = TweenService:Create(CFrameValue, TweenInfo.new((CF.Position - Character.PrimaryPart.Position).Magnitude / AllStats.Movespeed.Value  ), {Value = CF})
	Tween:Play()
	Tween.Completed:Wait()
	CFrameValue:Destroy()


end

local function GetRandomAnthill()
	for i,v in workspace.Anthills:GetChildren() do 
		if v.Platform.Owner.Value == "" then
			return v.Platform
		end
	end
end

local function GetWorkingConverter()
	for i,v in AllConverters do
		if not table.find(UsedConverters, v) then
			return v
		end
	end
end

local function MobExists(MobName : string)
	if MobName == "Baby Firefly" or MobName == "Mother Firefly" then return end
	print("Mob Is Valid")
	local FieldObject = workspace.Zones.Fields:FindFirstChild(getgenv().Field)
	if not FieldObject then return end
	print("Object Found")
	local MobsFolder = FieldObject:FindFirstChild("Mobs")
	if not MobsFolder then return end
	print("MobsFolder Found")
	for i,v in MobsFolder:GetChildren() do
		if string.find(v.Name, MobName) then return true end
	end
end

local function ByInstantConverter()
	local Character = Player.Character
	if not Character then return end

	local Converter = GetWorkingConverter()
	local Object = workspace.Toys.Converters:FindFirstChild(Converter)

	TweenTo(CFrame.new(Object.Position + Vector3.yAxis * 2))

	task.wait(.2)
	game:GetService("ReplicatedStorage").Events.Server_Event:FireServer("InstantConverterUse", Object)
	table.insert(UsedConverters, Converter)
	task.delay(900, function()
		table.remove(UsedConverters, table.find(UsedConverters, Converter))
	end)
end
local function ByManual(Value : Part)
	local Character = Player.Character
	if not Character then return end

	Character:BreakJoints()
end

Convert = function()
	local Character = Player.Character or Player.CharacterAdded:Wait()
	local Anthill = Vars:WaitForChild("Anthill")
	if not Anthill or not Anthill.Value then return end
	local Value = Anthill.Value 

	if getgenv().insta and #UsedConverters < #AllConverters and Inventory.Ticket.Value >= 1 then
		ByInstantConverter()
	else
		ByManual(Value)
	end
	task.wait(3)
end

Gather = function()
	local Character = Player.Character or Player.CharacterAdded:Wait()
	local FieldName = getgenv().Field


	if not FieldName then return end
	local Field = workspace.Zones.Fields:FindFirstChild(FieldName) :: Part

	if not Field then return end

	TweenTo(CFrame.new(Field.Position))

	task.wait(1)
	IsConverting = false
	print("REPEAT LOOP STARTED FOR GATHERING.")
	repeat task.wait() if not Leaderstats or not Leaderstats.Parent or not AllStats or not AllStats.Parent then break end until Leaderstats.Pollen.Value >= AllStats["Total Capacity"].Value
	IsConverting = true
	task.wait(1)

end

local PoleAdded, Fish, StopFishing



PoleAdded = function(Pole : Model)
	for i,v in Pole:GetDescendants() do
		print(v.Name)
		if v:IsA("BasePart") then
			v.Anchored = true
		end
	end
	Pole:PivotTo(Player.Character:GetPivot())
	Pole.Parent = workspace

	return Pole
end
Fish = function()
	local a = game:GetService("ReplicatedStorage").Events.Server_Function:InvokeServer("FishingRequest", Vector3.new(841.4443359375, 223.47323608398438, 1135.06298828125))
	print(a, typeof(a) == "table" and table.unpack(a) or "Not a table")
	if typeof(a) ~= "table" then return end
	return a
end
StopFishing = function()
	game:GetService("ReplicatedStorage").Events.Server_Function:InvokeServer("StopFishingRequest")
end
local function UltraFish()
	IsConverting = true
	TweenTo(CFrame.new(883.232, 259.747, 1105.05))
	local Character = Player.Character
	if not Character then IsConverting = false return end
	Character.PrimaryPart.Anchored = true

	while true do
		if Inventory.Worm.Value <= 0 then break end
		local F = Fish()
		if not F then continue end
		local Polee = PoleAdded(F[1])
		Polee:GetAttributeChangedSignal("Biting"):Wait()
		print("IM BITING IT")
		task.wait(0.1)
		StopFishing()
		task.wait(0.1)

	end
	Character.PrimaryPart.Anchored = false
	IsConverting = false
end
function AutoFarm()
	task.wait(2)
	local Anthill = Vars:WaitForChild("Anthill")

	local Chosen = Anthill.Value or GetRandomAnthill()
	local Character = Player.Character or Player.CharacterAdded:Wait()

	TweenTo(CFrame.new(Chosen.Position))
	task.defer(function()
		local Path = workspace:FindFirstChild("Tokens")
		local Path2 = workspace:FindFirstChild("Bubbles")


		game.Players.LocalPlayer.Idled:Connect(function()
			VirtualUser:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
			task.wait(1)
			VirtualUser:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
		end)

		task.defer(function()
			while task.wait() do
				for i,Token in Path:GetChildren() do
					if not IsConverting and Token.Name ~= "Star" and Token:GetAttribute("Client") == Player.Name then
						local suc, err = pcall(function()

							(Player.Character or Player.CharacterAdded:Wait()):SetPrimaryPartCFrame(Token.CFrame)
						end)
						task.wait(.03)
					end
				end
			end
		end)
		task.defer(function()
			while task.wait(1) do

				if Vars.Field.Value == "" and not IsConverting then
					TweenTo(workspace.Zones.Fields:FindFirstChild(getgenv().Field).CFrame)
					--(Player.Character or Player.CharacterAdded:Wait()):SetPrimaryPartCFrame(workspace.Zones.Fields:FindFirstChild(getgenv().Field).CFrame   )
				end
			end
		end)
		task.defer(function()
			while true do
				for i, bubble in Path2:GetChildren() do
					bubble.Position = (Player.Character or Player.CharacterAdded:Wait()).PrimaryPart.Position
				end
				task.wait(.01)
			end
		end)
		task.defer(function()
			while true do
				local CurrentTool = Player.Equipment.Tools.Value
				if not CurrentTool or CurrentTool == "" then continue end
				local Time = InfoTables[CurrentTool]
				if not Time then continue end
				if not Time.Time then continue end
				print(Time.Time)
				game:GetService("ReplicatedStorage").Events.Server_Event:FireServer("UseTool", 1)
				task.wait(Time.Time)


			end
		end)


		local Items = getgenv().requiredItems
		if Items then
			for i,Item in Items do
				local InBoost = require(game.ReplicatedStorage.Modules.InformationTables).Boosts.Boosts
				if InBoost[Item] then
					local Time = InBoost[Item].Time
					if Time then
						task.defer(function()
							while true do
								game:GetService("ReplicatedStorage").Events.Server_Event:FireServer("UseItem", Item)
								task.wait(Time)
							end
						end)
					end
				end
			end
		end

	end)

	Mobs.ChildAdded:Connect(function(v: Model)
		local FieldZone = workspace.Zones.Fields:FindFirstChild(getgenv().Field) :: Part
		if MobExists(v.Name) then
			local Humanoid = (Player.Character or Player.CharacterAdded:Wait()):FindFirstChild("Humanoid") :: Humanoid
			--Humanoid.HipHeight = FieldZone.Size.Y - Vector3.yAxis * 5
			while true do
				if not v or not v.Parent then break end
				Humanoid:MoveTo(FieldZone.Position + Vector3.zAxis * -(FieldZone.Size.X * 0.75))
				task.wait(1)
			end
		end
	end)
	Item1.Type.Changed:Connect(function()
		task.wait(2)
		for ItemSlot, ItemObject in Items:GetChildren() do

			task.defer(function()
				for ItemLimit = 1, ItemObject.Limit.Value do

					game:GetService("ReplicatedStorage").Events.Server_Function:InvokeServer("ShopPurchaseRequest", "FleaMarket", ItemSlot)
				end
			end)
		end
	end)

	task.wait(0.2)
	if not Anthill.Value then
		game:GetService("ReplicatedStorage").Events.Server_Function:InvokeServer(ohString1, ohString2, Chosen)
	end
	task.wait(1)

	while task.wait() do
		print("LOOPING")
		if not Leaderstats or not Leaderstats:FindFirstChild("Pollen") then break end
		print("LEADERSTAT EXISTS")
		if getgenv().ShouldFish and Inventory.Worm.Value >= 300 then
			UltraFish()
		elseif Leaderstats.Pollen.Value <= 0 then
			print("GATHERING")

			Gather()
		else
			print("CONVERTING")
			IsConverting = true
			Convert()
		end
	end

end

AutoFarm()
