





local Ants = require(game.ReplicatedStorage.Modules.Ants)

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local Player = Players.LocalPlayer

local Leaderstats = Player:WaitForChild("Leaderstats")
local Vars = Player:WaitForChild("Vars")
local AllStats = Player:WaitForChild("All_Stats")
local Map = workspace.Map
local Shops = Map.Shops


local FleaMarket = Shops.FleaMarket
local Items = FleaMarket.Items
local Item1 = Items["1"]


local AllConverters = {
	"Conv1_2",
	"Conv2_2",
	"Conv3_2",
	"Conv4_2",
	"Decal",
	"Model",
	"Timer",
	"",
	"Union",
	"Texture",
	"Part"
	
}
local UsedConverters = {}


local ohString1 = "ActionCall"
local ohString2 = "Anthill"

for i,v in Ants do
	setreadonly(v, false)
	v.Flying = true
	v.Speed = math.huge
	v.GatherTime = 0
	v.ConvertTime = 0
	table.freeze(v)
end

local Gather, Convert
local function GetRandomAnthill()
	for i,v in workspace.Anthills:GetChildren() do 
		if v.Platform.Owner.Value == "" then
			return v.Platform
		end
	end
end
local function GetWorkingConverter()
	for i,v in AllConverters do
		if not table.find(UsedConverters, v) then
			return v
		end
	end
end
Convert = function()
	local Character = Player.Character or Player.CharacterAdded:Wait()
	local Anthill = Vars:WaitForChild("Anthill")
	if not Anthill or not Anthill.Value then return end
	local Value = Anthill.Value 
	if #UsedConverters < #AllConverters then
		local Converter = GetWorkingConverter()
		game:GetService("ReplicatedStorage").Events.Server_Event:FireServer("InstantConverterUse", workspace.Toys.Converters:FindFirstChild(Converter, true))
		table.insert(UsedConverters, Converter)
		task.delay(900, function()
			table.remove(UsedConverters, table.find(UsedConverters, Converter))
		end)
	else
		Character:PivotTo(CFrame.new(Value.Position + Vector3.yAxis * 2) )
		task.wait(1)
		game:GetService("ReplicatedStorage").Events.Server_Function:InvokeServer(ohString1, ohString2, Value)
		repeat task.wait() if not Leaderstats or not Leaderstats.Parent then break end until Leaderstats.Pollen.Value <= 0
	end
	task.wait(3)
	Gather()
	
	
end
Gather = function()
	local Character = Player.Character or Player.CharacterAdded:Wait()
	local FieldName = getgenv().Field
	if not FieldName then return end
	local Field = workspace.Zones.Fields:FindFirstChild(FieldName)
	if not Field then return end
	Character:PivotTo(CFrame.new(Field.Position))
	repeat task.wait() if not Leaderstats or not Leaderstats.Parent or not AllStats or not AllStats.Parent then break end until Leaderstats.Pollen.Value >= AllStats["Total Capacity"].Value
	task.wait(1)
	Convert()
end

function AutoFarm()
	task.wait(2)
	local Anthill = Vars:WaitForChild("Anthill")

	local Chosen = Anthill.Value or GetRandomAnthill()
	local Character = Player.Character or Player.CharacterAdded:Wait()
	Character:PivotTo(CFrame.new(Chosen.Position))
	task.defer(function()
		for i,Name in {"Tokens", "Bubbles", "Fires"} do
			local Path = workspace:FindFirstChild(Name)
			Path.ChildAdded:Connect(function(TokenInstance)
				local success, error = pcall(function()
					TokenInstance.Position = Player.Character.PrimaryPart.Position
				end)
			end)
		end
		
		
		
		local FleaItems = getgenv().fleaItems
		if FleaItems then
			Item1.Type.Changed:Connect(function()
				task.wait(2)
				for ItemSlot, ItemObject in Items:GetChildren() do
					
					if table.find(FleaItems, ItemObject.Type.Value) then
						task.defer(function()
							for ItemLimit = 1, ItemObject.Limit.Value do

								game:GetService("ReplicatedStorage").Events.Server_Function:InvokeServer("ShopPurchaseRequest", "FleaMarket", ItemSlot)
							end
						end)
					end
				end
			end)
		end
		
		
		
		local Items = getgenv().requiredItems
		if Items then
			for i,Item in Items do
				local InBoost = require(game.ReplicatedStorage.Modules.InformationTables).Boosts.Boosts
				if InBoost[Item] then
					local Time = InBoost[Item].Time
					if Time then
						task.defer(function()
							while true do
								game:GetService("ReplicatedStorage").Events.Server_Event:FireServer("UseItem", Item)
								task.wait(Time)
							end
						end)
					end
				end
			end
		end
		
	end)
	
	task.wait(0.2)
	if not Anthill.Value then
		game:GetService("ReplicatedStorage").Events.Server_Function:InvokeServer(ohString1, ohString2, Chosen)
	end
	task.wait(1)
	
	
	if Leaderstats.Pollen.Value > 0 then
		Convert()
	else
		Gather()
	end
end

AutoFarm()
