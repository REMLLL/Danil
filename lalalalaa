
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local Player = Players.LocalPlayer

local Leaderstats = Player:WaitForChild("Leaderstats")
local Vars = Player:WaitForChild("Vars")
local AllStats = Player:WaitForChild("All_Stats")
local Inventory = Player:WaitForChild("Inventory")

local Map = workspace.Map
local Shops = Map.Shops


local FleaMarket = Shops.FleaMarket
local Items = FleaMarket.Items
local Item1 = Items["1"]


local AllConverters = {
	"Conv1_2",
	"Conv2_2",
	"Conv3_2",
	"Conv4_2",
}
local UsedConverters = {}


local ohString1 = "ActionCall"
local ohString2 = "Anthill"

local IsConverting : boolean = true
local Gather, Convert
local function GetRandomAnthill()
	for i,v in workspace.Anthills:GetChildren() do 
		if v.Platform.Owner.Value == "" then
			return v.Platform
		end
	end
end
local function GetWorkingConverter()
	for i,v in AllConverters do
		if not table.find(UsedConverters, v) then
			return v
		end
	end
end


Convert = function()
	local Character = Player.Character or Player.CharacterAdded:Wait()
	local Anthill = Vars:WaitForChild("Anthill")
	if not Anthill or not Anthill.Value then return end
	local Value = Anthill.Value 
	if getgenv().insta and #UsedConverters < #AllConverters and Inventory.Ticket.Value >= 1 then
		local Converter = GetWorkingConverter()
		local Object = workspace.Toys.Converters:FindFirstChild(Converter)
		Character:PivotTo(CFrame.new(Object.Position + Vector3.yAxis * 2))
		task.wait(.2)
		game:GetService("ReplicatedStorage").Events.Server_Event:FireServer("InstantConverterUse", Object)
		table.insert(UsedConverters, Converter)
		task.delay(900, function()
			table.remove(UsedConverters, table.find(UsedConverters, Converter))
		end)
	else
		Character:PivotTo(CFrame.new(Value.Position + Vector3.yAxis * 3))
		task.wait(1.3)
		print("AfterTime")
		game:GetService("ReplicatedStorage").Events.Server_Function:InvokeServer(ohString1, ohString2, Value)
		repeat task.wait() if not Leaderstats or not Leaderstats.Parent then break end until Leaderstats.Pollen.Value <= 0
	end
	task.wait(3)
	Gather()
end
Gather = function()
	local Character = Player.Character or Player.CharacterAdded:Wait()
	local FieldName = getgenv().Field
	if not FieldName then return end
	local Field = workspace.Zones.Fields:FindFirstChild(FieldName) :: Part
	if not Field then return end
	Character:PivotTo(CFrame.new(Field.Position))
	task.wait(1)
	IsConverting = false
	repeat task.wait() if not Leaderstats or not Leaderstats.Parent or not AllStats or not AllStats.Parent then break end until Leaderstats.Pollen.Value >= AllStats["Total Capacity"].Value
	IsConverting = true
	task.wait(1)
	Convert()
end

function AutoFarm()
	task.wait(2)
	local Anthill = Vars:WaitForChild("Anthill")

	local Chosen = Anthill.Value or GetRandomAnthill()
	local Character = Player.Character or Player.CharacterAdded:Wait()
	Character:PivotTo(CFrame.new(Chosen.Position))
	task.defer(function()
		local Path = workspace:FindFirstChild("Tokens")
		local Path2 = workspace:FindFirstChild("Bubbles")

		task.defer(function()
			while task.wait() do
				for i,Token in Path:GetChildren() do
					if not IsConverting and Token.Name ~= "Star" and Token:GetAttribute("Client") == Player.Name then
						local suc, err = pcall(function()
							(Player.Character or Player.CharacterAdded:Wait()):SetPrimaryPartCFrame(Token.CFrame)
						end)
						task.wait(.03)
					end
				end
			end
		end)
		task.defer(function()
			while task.wait(1) do

				if Vars.Field.Value == "" and not IsConverting then
					(Player.Character or Player.CharacterAdded:Wait()):SetPrimaryPartCFrame(workspace.Zones.Fields:FindFirstChild(getgenv().Field).CFrame   )
				end
			end
		end)
		task.defer(function()
			while true do
				for i, bubble in Path2:GetChildren() do
					bubble.Position = (Player.Character or Player.CharacterAdded:Wait()).PrimaryPart.Position
				end
				task.wait(.01)
			end
		end)




		Item1.Type.Changed:Connect(function()
			task.wait(2)
			for ItemSlot, ItemObject in Items:GetChildren() do

				task.defer(function()
					for ItemLimit = 1, ItemObject.Limit.Value do

						game:GetService("ReplicatedStorage").Events.Server_Function:InvokeServer("ShopPurchaseRequest", "FleaMarket", ItemSlot)
					end
				end)
			end
		end)



		local Items = getgenv().requiredItems
		if Items then
			for i,Item in Items do
				local InBoost = require(game.ReplicatedStorage.Modules.InformationTables).Boosts.Boosts
				if InBoost[Item] then
					local Time = InBoost[Item].Time
					if Time then
						task.defer(function()
							while true do
								game:GetService("ReplicatedStorage").Events.Server_Event:FireServer("UseItem", Item)
								task.wait(Time)
							end
						end)
					end
				end
			end
		end

	end)

	task.wait(0.2)
	if not Anthill.Value then
		game:GetService("ReplicatedStorage").Events.Server_Function:InvokeServer(ohString1, ohString2, Chosen)
	end
	task.wait(1)


	if Leaderstats.Pollen.Value > 0 then
		IsConverting = true
		Convert()
	else
		IsConverting = false
		Gather()
	end
end

AutoFarm()
