local Ants = require(game.ReplicatedStorage.Modules.Ants)

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")

local Player = Players.LocalPlayer

local Leaderstats = Player:WaitForChild("Leaderstats")
local Vars = Player:WaitForChild("Vars")
local AllStats = Player:WaitForChild("All_Stats")

local Field = "Cedar"


local ohString1 = "ActionCall"
local ohString2 = "Anthill"

for i,v in Ants do
	setreadonly(v, false)
	v.Flying = true
	v.Speed = math.huge
	v.GatherTime = 0
	v.ConvertTime = 0
	table.freeze(v)
end

local Gather, Convert
local function GetRandomAnthill()
	for i,v in workspace.Anthills:GetChildren() do 
		if v.Platform.Owner.Value == "" then
			return v.Platform
		end
	end
end

Convert = function()
	local Character = Player.Character or Player.CharacterAdded:Wait()
	local Anthill = Vars:WaitForChild("Anthill")
	if not Anthill or not Anthill.Value then return end
	local Value = Anthill.Value 
	Character:PivotTo(Value.CFrame)
	task.wait(1)
	game:GetService("ReplicatedStorage").Events.Server_Function:InvokeServer(ohString1, ohString2, Value)
	repeat task.wait() if not Leaderstats or not Leaderstats.Parent then break end until Leaderstats.Pollen.Value <= 0
	task.wait(3)
	Gather()
end
Gather = function()
	local Character = Player.Character or Player.CharacterAdded:Wait()
	local Field = workspace.Zones.Fields:FindFirstChild(Field)
	if not Field then return end
	Character:PivotTo(CFrame.new(Field.Position))
	repeat task.wait() if not Leaderstats or not Leaderstats.Parent or not AllStats or not AllStats.Parent then break end until Leaderstats.Pollen.Value >= AllStats["Total Capacity"].Value
	task.wait(1)
	Convert()
end

function AutoFarm()
	task.wait(2)
	local Anthill = Vars:WaitForChild("Anthill")

	local Chosen = Anthill.Value or GetRandomAnthill()
	local Character = Player.Character or Player.CharacterAdded:Wait()
	print(Chosen, typeof(Chosen), GetRandomAnthill(), Anthill.Value)
	Character:PivotTo(CFrame.new(Chosen.Position))
	task.defer(function()
		for i,Name in {"Tokens", "Bubbles", "Fires"} do
			local Path = workspace:FindFirstChild(Name)
			print(Path)
			Path.ChildAdded:Connect(function(TokenInstance)
				print("Token Added")
				print("Character is oke")
				local success, error = pcall(function()
					TokenInstance.Position = Player.Character.PrimaryPart.Position
				end)
				if not success then print(error) end
			end)
		end
	end)
	task.wait(0.2)
	if not Anthill.Value then
		game:GetService("ReplicatedStorage").Events.Server_Function:InvokeServer(ohString1, ohString2, Chosen)
	end
	task.wait(1)
	if Leaderstats.Pollen.Value > 0 then
		Convert()
	else
		Gather()
	end
end

AutoFarm()
